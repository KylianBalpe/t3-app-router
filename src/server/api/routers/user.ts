import { z } from "zod";

import {
  createTRPCRouter,
  protectedProcedure,
  publicProcedure,
} from "@/server/api/trpc";
import { editUsernameSchema, signUpSchema } from "@/lib/schemas/user-schema";
import { TRPCError } from "@trpc/server";
import { nanoid } from "nanoid";
import { Bcrypt } from "oslo/password";

export const userRouter = createTRPCRouter({
  signUp: publicProcedure
    .input(signUpSchema)
    .mutation(async ({ input, ctx }) => {
      const autoGeneratedId = nanoid(10).toUpperCase();
      const hashedPassword = await new Bcrypt().hash(input.password);

      const isEmailTaken = await ctx.db.user.findUnique({
        where: {
          email: input.email,
        },
      });

      if (isEmailTaken) {
        throw new TRPCError({
          code: "CONFLICT",
          message: "Email already taken",
        });
      }

      return ctx.db.user.create({
        data: {
          firstName: input.firstName,
          lastName: input.lastName,
          username: "user" + autoGeneratedId,
          email: input.email,
          password: hashedPassword,
        },
      });
    }),

  getUser: publicProcedure.input(z.string()).query(async ({ input, ctx }) => {
    return ctx.db.user.findUnique({
      where: {
        username: input,
      },
    });
  }),

  updateUsername: protectedProcedure
    .input(editUsernameSchema)
    .mutation(async ({ input, ctx }) => {
      const usernameExist = await ctx.db.user.findUnique({
        where: {
          username: input.username,
        },
      });

      if (usernameExist) {
        throw new TRPCError({
          code: "CONFLICT",
          message: "Username already exist",
        });
      }

      return ctx.db.user.update({
        where: {
          id: ctx.session.user.id,
        },
        data: {
          username: input.username,
        },
      });
    }),
});
