// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int     @id @default(autoincrement())
    post      String  @db.Text
    isPublic  Boolean @default(false) @map("is_public")
    isArchive Boolean @default(false) @map("is_archive")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    author   User   @relation(fields: [authorId], references: [id])
    authorId String @map("author_id")

    comments Comment[]

    @@index([post])
    @@map("posts")
}

model Comment {
    id      Int    @id @default(autoincrement())
    comment String @db.Text

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    authorId String @map("author_id")
    author   User   @relation(fields: [authorId], references: [id])

    postId Int  @map("post_id")
    post   Post @relation(fields: [postId], references: [id])

    @@map("comments")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?   @db.VarChar(255)
    username      String?   @unique @db.VarChar(100)
    email         String?   @unique
    password      String?   @db.VarChar(100)
    emailVerified DateTime? @map("email_verified")
    image         String?

    accounts Account[]
    sessions Session[]
    posts    Post[]
    comments Comment[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
